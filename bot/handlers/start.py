# bot/handlers/start.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.database.db import users_collection, messages_collection, ratings_collection
from uuid import uuid4
from datetime import datetime

router = Router()

class InteractionStates(StatesGroup):
    choosing_action = State()
    rating_appearance = State()
    rating_character = State()
    rating_intelligence = State()
    rating_humor = State()
    rating_trust = State()
    wants_relationship = State()
    knows_personally = State()
    asking_for_message = State()
    writing_message = State()
    choosing_anonymity = State()
    waiting_message = State()

@router.message(F.text.startswith("/start send_"))
async def handle_referral(message: Message, state: FSMContext):
    link_id = message.text.replace("/start send_", "").strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º link_id
    user = await users_collection.find_one({"link_id": link_id})
    if user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(recipient_user_id=user['user_id'], recipient_username=user['username'])
        await state.set_state(InteractionStates.choosing_action)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="start_rating")],
            [InlineKeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_message")]
        ])
        
        await message.answer(
            f"üë§ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user['username']}.\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞.")

@router.callback_query(F.data == "send_message")
async def request_message(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    recipient_username = data.get('recipient_username')
    
    await state.set_state(InteractionStates.waiting_message)
    await callback_query.message.edit_text(
        f"üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}:\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )

@router.message(InteractionStates.waiting_message)
async def process_anonymous_message(message: Message, state: FSMContext):
    data = await state.get_data()
    recipient_user_id = data.get('recipient_user_id')
    recipient_username = data.get('recipient_username')
    
    if not recipient_user_id:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    message_data = {
        "recipient_user_id": recipient_user_id,
        "sender_user_id": message.from_user.id,
        "message_text": message.text,
        "timestamp": datetime.utcnow(),
        "is_read": False
    }
    
    await messages_collection.insert_one(message_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        await message.bot.send_message(
            chat_id=recipient_user_id,
            text=f"üì® –í–∞–º –ø—Ä–∏—à–ª–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}"
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    
    await state.clear()

@router.callback_query(F.data == "start_rating")
async def start_rating_process(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    recipient_username = data.get('recipient_username')
    
    await state.update_data(ratings={})
    await state.set_state(InteractionStates.rating_appearance)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Ü–µ–Ω–∫–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
    keyboard_buttons = []
    for i in range(1, 11):
        keyboard_buttons.append([InlineKeyboardButton(text=f"{i}", callback_data=f"appearance_{i}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback_query.message.edit_text(
        f"–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{recipient_username}\n\n"
        f"üòç –û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å (1-10):",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("appearance_"))
async def handle_appearance_rating(callback_query: CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.replace("appearance_", ""))
    
    data = await state.get_data()
    data['ratings']['appearance'] = rating
    await state.update_data(ratings=data['ratings'])
    await state.set_state(InteractionStates.rating_character)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    keyboard_buttons = []
    for i in range(1, 11):
        keyboard_buttons.append([InlineKeyboardButton(text=f"{i}", callback_data=f"character_{i}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback_query.message.edit_text(
        f"üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {rating}/10 ‚úÖ\n\n"
        f"üëè –û—Ü–µ–Ω–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä (1-10):",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("character_"))
async def handle_character_rating(callback_query: CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.replace("character_", ""))
    
    data = await state.get_data()
    data['ratings']['character'] = rating
    await state.update_data(ratings=data['ratings'])
    await state.set_state(InteractionStates.rating_intelligence)
    
    ratings = data['ratings']
    
    keyboard_buttons = []
    for i in range(1, 11):
        keyboard_buttons.append([InlineKeyboardButton(text=f"{i}", callback_data=f"intelligence_{i}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback_query.message.edit_text(
        f"üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {ratings['appearance']}/10 ‚úÖ\n"
        f"üëè –•–∞—Ä–∞–∫—Ç–µ—Ä: {rating}/10 ‚úÖ\n\n"
        f"üß† –û—Ü–µ–Ω–∏—Ç–µ —É–º (1-10):",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("intelligence_"))
async def handle_intelligence_rating(callback_query: CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.replace("intelligence_", ""))
    
    data = await state.get_data()
    data['ratings']['intelligence'] = rating
    await state.update_data(ratings=data['ratings'])
    await state.set_state(InteractionStates.rating_humor)
    
    ratings = data['ratings']
    
    keyboard_buttons = []
    for i in range(1, 11):
        keyboard_buttons.append([InlineKeyboardButton(text=f"{i}", callback_data=f"humor_{i}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback_query.message.edit_text(
        f"üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {ratings['appearance']}/10 ‚úÖ\n"
        f"üëè –•–∞—Ä–∞–∫—Ç–µ—Ä: {ratings['character']}/10 ‚úÖ\n"
        f"üß† –£–º: {rating}/10 ‚úÖ\n\n"
        f"üòÇ –û—Ü–µ–Ω–∏—Ç–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞ (1-10):",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("humor_"))
async def handle_humor_rating(callback_query: CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.replace("humor_", ""))
    
    data = await state.get_data()
    data['ratings']['humor'] = rating
    await state.update_data(ratings=data['ratings'])
    await state.set_state(InteractionStates.rating_trust)
    
    ratings = data['ratings']
    
    keyboard_buttons = []
    for i in range(1, 11):
        keyboard_buttons.append([InlineKeyboardButton(text=f"{i}", callback_data=f"trust_{i}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback_query.message.edit_text(
        f"üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {ratings['appearance']}/10 ‚úÖ\n"
        f"üëè –•–∞—Ä–∞–∫—Ç–µ—Ä: {ratings['character']}/10 ‚úÖ\n"
        f"üß† –£–º: {ratings['intelligence']}/10 ‚úÖ\n"
        f"üòÇ –ß—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞: {rating}/10 ‚úÖ\n\n"
        f"üç¨ –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (1-10):",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("trust_"))
async def handle_trust_rating(callback_query: CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.replace("trust_", ""))
    
    data = await state.get_data()
    data['ratings']['trust'] = rating
    await state.update_data(ratings=data['ratings'])
    await state.set_state(InteractionStates.wants_relationship)
    
    ratings = data['ratings']
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="relationship_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="relationship_no")]
    ])
    
    await callback_query.message.edit_text(
        f"üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {ratings['appearance']}/10 ‚úÖ\n"
        f"üëè –•–∞—Ä–∞–∫—Ç–µ—Ä: {ratings['character']}/10 ‚úÖ\n"
        f"üß† –£–º: {ratings['intelligence']}/10 ‚úÖ\n"
        f"üòÇ –ß—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞: {ratings['humor']}/10 ‚úÖ\n"
        f"üç¨ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {rating}/10 ‚úÖ\n\n"
        f"üë©‚Äç‚ù§Ô∏è‚Äçüë® –•–æ—Ç–µ–ª–∏ –±—ã –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("relationship_"))
async def handle_relationship_question(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data.replace("relationship_", "")
    
    data = await state.get_data()
    data['wants_relationship'] = answer
    await state.update_data(wants_relationship=answer)
    await state.set_state(InteractionStates.knows_personally)
    
    ratings = data['ratings']
    relationship_text = "–î–∞" if answer == "yes" else "–ù–µ—Ç"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="knows_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="knows_no")]
    ])
    
    await callback_query.message.edit_text(
        f"üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {ratings['appearance']}/10 ‚úÖ\n"
        f"üëè –•–∞—Ä–∞–∫—Ç–µ—Ä: {ratings['character']}/10 ‚úÖ\n"
        f"üß† –£–º: {ratings['intelligence']}/10 ‚úÖ\n"
        f"üòÇ –ß—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞: {ratings['humor']}/10 ‚úÖ\n"
        f"üç¨ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {ratings['trust']}/10 ‚úÖ\n"
        f"üë©‚Äç‚ù§Ô∏è‚Äçüë® –•–æ—á–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è: {relationship_text} ‚úÖ\n\n"
        f"üëÄ –ó–Ω–∞–∫–æ–º—ã –ª–∏ –≤—ã –ª–∏—á–Ω–æ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("knows_"))
async def handle_knows_personally(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data.replace("knows_", "")
    
    data = await state.get_data()
    data['knows_personally'] = answer
    await state.update_data(knows_personally=answer)
    await state.set_state(InteractionStates.asking_for_message)
    
    ratings = data['ratings']
    relationship_text = "–î–∞" if data['wants_relationship'] == "yes" else "–ù–µ—Ç"
    knows_text = "–î–∞" if answer == "yes" else "–ù–µ—Ç"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –î–∞, —Ö–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="write_message")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫—É", callback_data="skip_message")]
    ])
    
    await callback_query.message.edit_text(
        f"üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {ratings['appearance']}/10 ‚úÖ\n"
        f"üëè –•–∞—Ä–∞–∫—Ç–µ—Ä: {ratings['character']}/10 ‚úÖ\n"
        f"üß† –£–º: {ratings['intelligence']}/10 ‚úÖ\n"
        f"üòÇ –ß—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞: {ratings['humor']}/10 ‚úÖ\n"
        f"üç¨ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {ratings['trust']}/10 ‚úÖ\n"
        f"üë©‚Äç‚ù§Ô∏è‚Äçüë® –•–æ—á–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è: {relationship_text} ‚úÖ\n"
        f"üëÄ –ó–Ω–∞–∫–æ–º—ã –ª–∏—á–Ω–æ: {knows_text} ‚úÖ\n\n"
        f"üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ—Ü–µ–Ω–∫–µ?",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "write_message")
async def request_rating_message(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(InteractionStates.writing_message)
    await callback_query.message.edit_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )

@router.callback_query(F.data == "skip_message")
async def skip_message(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(message=None)
    await choose_anonymity(callback_query, state)

@router.message(InteractionStates.writing_message)
async def handle_message_input(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    await state.set_state(InteractionStates.choosing_anonymity)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –°–∫—Ä—ã—Ç—å –º–æ—é –ª–∏—á–Ω–æ—Å—Ç—å (–∞–Ω–æ–Ω–∏–º–Ω–æ)", callback_data="send_anonymous")],
        [InlineKeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–µ –∏–º—è", callback_data="send_named")]
    ])
    
    await message.answer("–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É?", reply_markup=keyboard)

async def choose_anonymity(callback_query: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –°–∫—Ä—ã—Ç—å –º–æ—é –ª–∏—á–Ω–æ—Å—Ç—å (–∞–Ω–æ–Ω–∏–º–Ω–æ)", callback_data="send_anonymous")],
        [InlineKeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–µ –∏–º—è", callback_data="send_named")]
    ])
    
    await callback_query.message.edit_text("–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("send_"))
async def send_rating(callback_query: CallbackQuery, state: FSMContext):
    anonymity = callback_query.data.replace("send_", "")
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"id_{user_id}"
    
    data = await state.get_data()
    target_user_id = data['recipient_user_id']
    target_username = data['recipient_username']
    ratings = data['ratings']
    wants_relationship = data['wants_relationship']
    knows_personally = data['knows_personally']
    message_text = data.get('message')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π
    sender_name = "üë§ –ê–Ω–æ–Ω–∏–º" if anonymity == "anonymous" else f"üë§ @{username}"
    relationship_text = "–î–∞" if wants_relationship == "yes" else "–ù–µ—Ç"
    knows_text = "–î–∞" if knows_personally == "yes" else "–ù–µ—Ç"
    
    rating_message = (
        f"‚≠êÔ∏è –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞!\n"
        f"–û—Ç –∫–æ–≥–æ: {sender_name}\n\n"
        f"üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {ratings['appearance']}/10\n"
        f"üëè –•–∞—Ä–∞–∫—Ç–µ—Ä: {ratings['character']}/10\n"
        f"üß† –£–º: {ratings['intelligence']}/10\n"
        f"üòÇ –ß—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞: {ratings['humor']}/10\n"
        f"üç¨ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {ratings['trust']}/10\n"
        f"üë©‚Äç‚ù§Ô∏è‚Äçüë® –•–æ—á–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è: {relationship_text}\n"
        f"üëÄ –ó–Ω–∞–∫–æ–º—ã –ª–∏—á–Ω–æ: {knows_text}"
    )
    
    if message_text:
        rating_message += f"\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    rating_record = {
        "from_user_id": user_id,
        "to_user_id": target_user_id,
        "anonymous": anonymity == "anonymous",
        "ratings": ratings,
        "wants_relationship": wants_relationship == "yes",
        "knows_personally": knows_personally == "yes",
        "message": message_text,
        "timestamp": datetime.utcnow()
    }
    
    await ratings_collection.insert_one(rating_record)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        await callback_query.bot.send_message(
            chat_id=target_user_id,
            text=rating_message
        )
        await callback_query.message.edit_text("‚úÖ –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    
    await state.clear()

@router.message(F.text == "/start")
async def start_cmd(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"id_{user_id}"
    
    existing_user = await users_collection.find_one({"user_id": user_id})
    if not existing_user:
        link_id = str(uuid4())
        await users_collection.insert_one({
            "user_id": user_id,
            "username": username,
            "link_id": link_id,
            "ratings": [],
            "created_at": datetime.utcnow()
        })
    else:
        link_id = existing_user["link_id"]
    
    bot_username = (await message.bot.me()).username
    link = f"https://t.me/{bot_username}?start=send_{link_id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¨ –ú–æ—è —Å—Å—ã–ª–∫–∞", url=link)],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="my_messages")],
        [InlineKeyboardButton(text="üìà –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏", callback_data="my_ratings")]
    ])
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ü–µ–Ω–æ–∫!\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        "üìù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏!\n\n"
        "‚ú® –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ª—é–¥–∏ —Å–º–æ–≥—É—Ç:\n"
        "‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å –≤–∞—Å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–æ–º",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "my_messages")
async def show_my_messages(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    
    messages_cursor = messages_collection.find(
        {"recipient_user_id": user_id}
    ).sort("timestamp", -1).limit(10)
    
    messages_list = await messages_cursor.to_list(length=10)
    
    if not messages_list:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        await callback_query.message.edit_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=keyboard)
        return
    
    text = "üì® –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for i, msg in enumerate(messages_list, 1):
        timestamp = msg['timestamp'].strftime("%d.%m.%Y %H:%M")
        preview = msg['message_text'][:50] + "..." if len(msg['message_text']) > 50 else msg['message_text']
        text += f"{i}. {timestamp}\n{preview}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "my_ratings")
async def show_my_ratings(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ratings_cursor = ratings_collection.find(
        {"to_user_id": user_id}
    ).sort("timestamp", -1).limit(5)
    
    ratings_list = await ratings_cursor.to_list(length=5)
    
    if not ratings_list:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        await callback_query.message.edit_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.", reply_markup=keyboard)
        return
    
    text = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏:\n\n"
    
    for i, rating in enumerate(ratings_list, 1):
        sender_name = "–ê–Ω–æ–Ω–∏–º" if rating['anonymous'] else f"@{rating.get('from_username', 'Unknown')}"
        timestamp = rating['timestamp'].strftime("%d.%m.%Y %H:%M")
        
        text += f"{i}. –û—Ç: {sender_name} ({timestamp})\n"
        text += f"   üòç –í–Ω–µ—à–Ω–æ—Å—Ç—å: {rating['ratings']['appearance']}/10\n"
        text += f"   üëè –•–∞—Ä–∞–∫—Ç–µ—Ä: {rating['ratings']['character']}/10\n"
        text += f"   üß† –£–º: {rating['ratings']['intelligence']}/10\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user = await users_collection.find_one({"user_id": user_id})
    
    if not user:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    bot_username = (await callback_query.bot.me()).username
    link = f"https://t.me/{bot_username}?start=send_{user['link_id']}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¨ –ú–æ—è —Å—Å—ã–ª–∫–∞", url=link)],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="my_messages")],
        [InlineKeyboardButton(text="üìà –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏", callback_data="my_ratings")]
    ])
    
    await callback_query.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ü–µ–Ω–æ–∫!\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        "üìù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏!\n\n"
        "‚ú® –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ª—é–¥–∏ —Å–º–æ–≥—É—Ç:\n"
        "‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å –≤–∞—Å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–æ–º",
        reply_markup=keyboard
    )